package Input;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import advisor.main.MethodAdvisor;
import method.advisor.ClassNode;
import method.advisor.Dependence;
import method.advisor.MethodNode;
import SPN.Method;

/*
 * Esta classe cria o arquivo para a colocação manual dos tempos conforme os 
 * o descritos no arquivo input_methods.java
 */
public class CreateInputTimeFile {

	private ArrayList<Method> methodList;
	private File fo;
	private FileWriter fw;
	private BufferedWriter bw;
	
	public CreateInputTimeFile(){

		this.methodList = new ArrayList<Method>();
		
		try{
			
		this.fo = new java.io.File("inputTimeFile.txt");
		this.fw = new FileWriter(fo, false);
		this.bw = new BufferedWriter(fw);
		
		this.bw.write("Insert the execution time of each method call after the '='.");
		this.bw.newLine();
		this.bw.newLine();
		
		}catch(IOException e){
			e.printStackTrace();
		}
		
		
	}
	
	//Esta função lê e interpreta o arquivo 'input_methods.java' para a criação do arquivo inputTimeFile.txt
	public void createMethods(ClassNode cn) throws IOException{
		
		for(MethodNode mn : cn.getMethodNodes()){
			for(Dependence d : mn.getDependences()){

				Method method1 = null;
				Method method2 = null;
				
				if(d.getAssign() != null){
					method1 = searchMethod(d.getAssign().toString());
					if(method1 == null){
						method1 = new Method();
						method1.setName(d.getAssign().toString());
						this.methodList.add(method1);
						
						//Caso queira deixar o campo em branco para o usuário digitar.
						//this.bw.write(method1.getName() + "=");
						
						//Caso queira colocar um tempo fixo.
						this.bw.write(method1.getName() + "=0.0142125");
						this.bw.newLine();
						
					}
				}

				if(d.getCall() != null){
					method2 = searchMethod(d.getCall().toString());
					if(method2 == null){
						method2 = new Method();
						method2.setName(d.getCall().toString());
						if(method1 != null){
							method2.setDependsOn(method1);
						}
						this.methodList.add(method2);
						
						//this.bw.write(method2.getName() + "=");
						this.bw.write(method2.getName() + "=0.0142125");
						this.bw.newLine();
						
					}else{
						if(method1 != null){
							method2.setDependsOn(method1);
						}

					}
					if(method1 != null){
						method1.setDependents(method2);
					}
				}
			}
		}
	}
	
	//Fecha a stream de escrita no arquivo.
	public void closeFileTime () throws IOException{
		
		bw.close();
		fw.close();
		
	}
	
	//Busca um determinado método pelo nome.
	public Method searchMethod(String methodName){
		for(int i = 0; i < this.methodList.size(); i++){
			if(this.methodList.get(i).getName().equals(methodName)){
				return this.methodList.get(i);
			}
		}
		return null;
	}

	public static void main(String[] args) throws Exception {
		// TODO Auto-generated method stub

		ClassNode cn = MethodAdvisor.runMethodAdvisor("input_methods.java");
		
		CreateInputTimeFile ir = new CreateInputTimeFile();
		ir.createMethods(cn); //Create the inter
		ir.closeFileTime();

		System.out.println("Arquivo inputTimeFile.txt criado.");
		
	}


}
